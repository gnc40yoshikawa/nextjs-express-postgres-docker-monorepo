networks:
  edge:                   # 入口用（Traefik だけ公開）
  app: {}                 # フロント（web, api が乗る）
  backend:                # バックエンド（api, db が乗る。webは参加しない）
    internal: true        # 外部（ホスト）へはルーティングされない

services:
  traefik:
    image: traefik:v3.5.3
    command:
      - --api.dashboard=true
      - --api.insecure=true     # ← ローカル以外では必ずfalseにする
      - --providers.docker=true
      - --entrypoints.web.address=:80
      # HTTPS を使うなら↓も有効化（自己署名や mkcert などは後述）
      # - --entrypoints.websecure.address=:443
    ports:
      - "80:80"
      - "8080:8080"   # ダッシュボード（http://localhost:8080）
      # - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [edge, app]
    depends_on: [web]

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    tty: true
    expose:
      - "3000"
    develop:
      watch:
        - action: rebuild
          path: package.json
        - action: sync
          path: ./web
          target: /web
          ignore:
            - node_modules/
    volumes:
      - type: bind
        source: ./web
        target: /web           # コードをbind mount（ホットリロード）
      - web-node-modules:/web/node_modules   # レンダリング時間短縮のためvolume mountに切り出し
      - web-next:/web/.next   # レンダリング時間短縮のためvolume mountに切り出し
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.rule=Host(`web.localhost`)
      - traefik.http.routers.web.entrypoints=web
      - traefik.http.services.web.loadbalancer.server.port=3000
    networks: [app]             # ← web は app ネットワークのみ
    depends_on: [api]

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    tty: true
    expose:
      - "4000"
    volumes:
      - type: bind
        source: ./api
        target: /api           # コードをbind mount（ホットリロード）
      - api-node-modules:/api/node_modules         # node_modulesはコンテナ内
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.localhost`)
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.services.api.loadbalancer.server.port=4000
    networks:
      - app                    # ← web からの HTTP を受ける
      - backend                # ← db とだけ直接通す
    depends_on:
      db:
        condition: service_healthy

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    tty: true
    expose:
      - "5432"   #商用利用時は閉じる
    volumes:
      - db-store:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      # 起動時・接続時に動的変更可能なためこちらで設定
      TZ: Asia/Tokyo
    networks: [backend]         # ← backend のみ（web からは見えない）
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 5s
      timeout: 3s
      retries: 10

volumes:
  db-store:
  web-node-modules:
  web-next:
  api-node-modules: